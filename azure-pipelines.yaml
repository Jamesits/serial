name: $(SourceBranchName)-$(Date:yyyyMMdd).$(Rev:r)
variables:
  GOVER: '1.17.2'

trigger:
  batch: true
  branches:
    include: [ "master", "develop" ]
  paths:
    exclude: [ "README.md", "LICENSE", ".github/*", "examples/*", ".golangci.yml", ".gitlab-ci.yml", ".idea/*", "doc/*" ]

pr:
  autoCancel: true
  branches:
    include: [ "master", "develop" ]
  paths:
    exclude: [ "README.md", "LICENSE", ".github/*", "examples/*", ".golangci.yml", ".gitlab-ci.yml", ".idea/*", "doc/*" ]

jobs:
  - job: binary
    displayName: "binary build"
    pool:
      vmImage: "ubuntu-latest"
    workspace:
      clean: all
    timeoutInMinutes: 30

    strategy:
      matrix:
        linux-amd64:
          GOOS: 'linux'
          GOARCH: 'amd64'
          FILENAME_SUFFIX: ''
        linux-arm64:
          GOOS: 'linux'
          GOARCH: 'arm64'
          FILENAME_SUFFIX: ''
        linux-riscv64:
          GOOS: 'linux'
          GOARCH: 'riscv64'
          FILENAME_SUFFIX: ''
        windows-amd64:
          GOOS: 'windows'
          GOARCH: 'amd64'
          FILENAME_SUFFIX: '.exe'
        windows-i386:
          GOOS: 'windows'
          GOARCH: '386'
          FILENAME_SUFFIX: '.exe'
        windows-arm64:
          GOOS: 'windows'
          GOARCH: 'arm64'
          FILENAME_SUFFIX: '.exe'
        darwin-amd64:
          GOOS: 'darwin'
          GOARCH: 'amd64'
          FILENAME_SUFFIX: ''
        darwin-arm64:
          GOOS: 'darwin'
          GOARCH: 'arm64'
          FILENAME_SUFFIX: ''

    steps:
      - task: GoTool@0
        displayName: 'Use Go'
        inputs:
          version: $(GOVER)

      - bash: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y upx
        displayName: 'Install Dependencies'

      - bash: |
          export GOPATH="/tmp/go"
          export GOBIN="/opt/hostedtoolcache/go/${GOVER}/x64/bin"
          export OUT_FILE="serial-${GOOS}-${GOARCH}${FILENAME_SUFFIX}"
          bash ./contrib/build/build.sh
          cp build/* "${BUILD_ARTIFACTSTAGINGDIRECTORY}"
        displayName: 'Build'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          ArtifactName: 'serial-$(GOOS)-$(GOARCH)'

  - job: debian_10
    displayName: "packaging debian-bullseye"
    pool:
      vmImage: "ubuntu-latest"
    container:
      image: "debian:bullseye-backports"
      options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
    workspace:
      clean: all
    timeoutInMinutes: 30

    steps:
      # https://github.com/microsoft/azure-pipelines-agent/issues/2043#issuecomment-687983301
      - bash: |
          /tmp/docker exec -t -u 0 ci-container \
          sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
        displayName: 'Install sudo'

      - bash: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get install -y devscripts equivs dh-make-golang dh-golang golang-any
          git config --global user.name "buildbot"
          git config --global user.email "buildbot@example.com"
        displayName: 'Install Dependencies'

      - bash: |
          bash contrib/debian/build.sh

          cp /tmp/artifacts/* "${BUILD_ARTIFACTSTAGINGDIRECTORY}"
        displayName: 'Build'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          ArtifactName: 'serial-archlinux-amd64'

  - job: archlinux
    displayName: "packaging archlinux"
    pool:
      vmImage: "ubuntu-latest"
    container:
      image: "archlinux:latest"
      options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
    workspace:
      clean: all
    timeoutInMinutes: 30

    steps:
      - bash: |
          /tmp/docker exec -t -u 0 ci-container \
          sh -c "pacman -Syyu --noconfirm; pacman -S --noconfirm --needed sudo"
        displayName: 'Install sudo'

      - bash: |
          sudo pacman -S --noconfirm --needed pacman-contrib binutils go git upx base-devel
        displayName: 'Install Dependencies'

      - bash: |
          bash contrib/archlinux/build.sh
          cp -afv /tmp/archlinux/*.pkg.* "${BUILD_ARTIFACTSTAGINGDIRECTORY}"
        displayName: 'Build'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          ArtifactName: 'serial-archlinux-amd64'

  - job: fedora
    displayName: "packaging fedora"
    pool:
      vmImage: "ubuntu-latest"
    container:
      image: "fedora:latest"
      options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
    workspace:
      clean: all
    timeoutInMinutes: 30

    steps:
      - bash: |
          /tmp/docker exec -t -u 0 ci-container \
          sh -c "dnf --assumeyes update; dnf --assumeyes install sudo"
        displayName: 'Install sudo'

      - bash: |
          sudo dnf --assumeyes group install "Development Tools"
          sudo dnf --assumeyes install go rpmdevtools
        displayName: 'Install Dependencies'

      - bash: |
          bash contrib/rpm/build.sh
          cp "${HOME}/rpmbuild/RPMS/"**/* "${BUILD_ARTIFACTSTAGINGDIRECTORY}"
        displayName: 'Build'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact'
        inputs:
          ArtifactName: 'serial-fedora-amd64'
